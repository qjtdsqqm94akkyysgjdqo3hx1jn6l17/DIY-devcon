#!/bin/bash

# This uses the shell's expansion rule to enable overriding default values
# the syntax looks like this:
# ${explanation:=notice how we don't need to quote the string inside here}
# ${my_variable:=my default value ($explanation, except with sub shells: "$(ls .)")}
# `:=` meaning "fall back to this value if the variable in question's not set or empty"
# `=` meaning "fall back to this value only if the variable in question's not set (not defined)"

: "${container_image:=}"    # SET ME!
: "${codium_server_path:=}" # SET ME!

# change `podman` to `docker` you use that instead.
: "${container_prog:=podman}"
container_extra_args=()

# container_extra_args=("-a" "value" "--option" "values")

: "${project_path:=$CURR_DIR}"
: "${diy_devcon_base_path:=.vscode/diy-devcontainer}"
: "${project_home_path:=$diy_devcon_base_path/home}"

: "${codium_server_token_file:=$project_home_path/token}"
: "${codium_server_env_file:=$project_home_path/.env}"

: "${codium_server_internal_port:=8989}" # the port your codium server will be listening on inside the container
: "${codium_server_external_port:=8989}" # the port that your container will map to the aforementioned port for you to access

: "${container_home_path:=/root}"
: "${container_codium_server_token_file:=$container_home_path/token}"
: "${container_codium_server_path:=/bin/codium-server}"

: "${_print_configs:=false}"
: "${_permanent_container:=false}"
